import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import numpy as np

# T칤tulo del dashboard
st.title(" 游늳Segmentaci칩n de clientes - H치bitos de compra游늴 ")

# Crear un contenedor para el archivo y pasarlo a trav칠s de todo Streamlit
@st.cache_resource
def cargar_datos(uploaded_file):
    return pd.read_csv(uploaded_file)

# Cargar el archivo una sola vez
uploaded_file = st.sidebar.file_uploader("Cargar archivo CSV", type="csv")

# Crear una barra lateral o pesta침as para seleccionar entre diferentes secciones
option = st.sidebar.radio("Selecciona una opci칩n", ["Introducci칩n", "EDA", "Modelado"])

if uploaded_file is not None:
    df = cargar_datos(uploaded_file)  # Cargar el archivo solo una vez

    if option == "Introducci칩n":
        st.subheader("Introducci칩n")
        st.markdown("""
        El conjunto de datos en cuesti칩n proviene de una cadena de suministro de productos para los hogares en Colombia,
        y contiene informaci칩n detallada sobre las ventas de diversos productos como v칤veres y art칤culos de aseo. Cada registro incluye datos sobre
        el producto vendido, la fecha de la transacci칩n, el tipo de producto, y cu치l ha sido el producto m치s vendido en un periodo determinado.
        El objetivo principal de este an치lisis es segmentar a los clientes en diferentes grupos seg칰n sus h치bitos de compra, lo que permitir치 ofrecer
        un sistema de recomendaci칩n de productos basado en su historial de compras. A trav칠s del uso de modelos de clasificaci칩n de machine learning (ML),
        se buscar치 identificar patrones y comportamientos recurrentes en las compras de los clientes, con el fin de mejorar la personalizaci칩n
        de las ofertas y optimizar las estrategias comerciales. Este enfoque no solo ayudar치 a entender mejor las preferencias del cliente, sino que tambi칠n 
        contribuir치 a aumentar la eficiencia y la satisfacci칩n del cliente mediante la propuesta de productos adecuados y oportunos.
        Los datos sobre las ventas de productos fueron capturan a trav칠s de sistemas de punto de venta (POS), los cuales registran cada transacci칩n
        realizada en el comercio. Estos sistemas permiten almacenar informaci칩n clave, como el tipo de producto, la cantidad,
        el precio, y la fecha y hora de la venta, as칤 como el m칠todo de pago utilizado.

        - **Objetivo General**: Desarrollar un modelo de segmentaci칩n de clientes basado en los h치bitos de compra
        a partir de los datos de ventas de una cadena de suministro de productos para el hogar en Magangu칠, Bol칤var, con
        el fin de implementar un sistema de recomendaci칩n de productos y optimizar las estrategias comerciales mediante 
        el uso de modelos de clasificaci칩n de machine learning.

        - ***Objetivos espec칤ficos***:
            - Realizar un an치lisis exploratorio de datos (EDA)
            - Segmentar a los clientes
            - Desarrollar y entrenar modelos de clasificaci칩n de machine learning
            - Proponer un sistema de recomendaci칩n de productos
            - Evaluar el rendimiento de los modelos de clasificaci칩n y recomendaci칩n
        """)
        # Imagen desde GitHub
        st.image("https://github.com/yeisondelatorre/Trabajorfinal/blob/main/ima1.jpeg?raw=true", caption="Descripci칩n de la imagen", use_container_width=True)

    elif option == "EDA":
        st.subheader("An치lisis Exploratorio de Datos (EDA)")
        st.write("""
        En esta secci칩n realizaremos el an치lisis exploratorio de datos (EDA) para comprender mejor la base de datos.
        Se pueden incluir gr치ficas, estad칤sticas descriptivas y otras herramientas 칰tiles para explorar los datos.
        """)

        try:
            # Filtrar productos m치s vendidos
            productos_filtrar = [590101, 590102, 590103, 205003, 200130, 800020, 205601, 540101, 501121, 501120]
            dfinal = df[df['codproducto'].isin(productos_filtrar)]  # Filtrar productos

            # Agrupar por producto para calcular total de unidades vendidas y total de ingresos
            top_productos = df.groupby(['codproducto', 'nom_producto']).agg(
                Total_Unidades=('cantidad', 'sum'),
                Total_Ventas=('Total_Venta', 'sum')
            ).reset_index()

            # Ordenar por la cantidad vendida
            top_productos = top_productos.sort_values(by=['Total_Unidades'], ascending=False)

            # Gr치fico de Top 10 Productos M치s Vendidos usando Plotly Express
            st.subheader("Gr치fico de Top 10 Productos M치s Vendidos")
            fig = px.bar(top_productos.head(10), 
                         x='Total_Unidades', 
                         y='nom_producto', 
                         orientation='h', 
                         title="Top 10 Productos M치s Vendidos por Cantidad", 
                         labels={"Total_Unidades": "Total de Unidades Vendidas", "nom_producto": "Producto"}, 
                         color='Total_Unidades')
            st.plotly_chart(fig)

            # Gr치fico de Distribuci칩n de Ventas por Tipo de Cliente usando Plotly Express
            st.subheader("Distribuci칩n de Ventas por Tipo de Cliente")
            ventas_tipo_cliente = df.groupby('nom_tipocliente')['Total_Venta'].sum().reset_index()
            fig2 = px.bar(ventas_tipo_cliente, 
                          x='nom_tipocliente', 
                          y='Total_Venta', 
                          title="Distribuci칩n de Ventas por Tipo de Cliente", 
                          labels={"nom_tipocliente": "Tipo de Cliente", "Total_Venta": "Total de Ventas"},
                          color='Total_Venta')
            st.plotly_chart(fig2)

            # Histograma de los productos vendidos usando Plotly Express
            st.subheader("Histograma de Productos Vendidos")
            fig3 = px.bar(dfinal.groupby('nom_producto')['Total_Venta'].sum().reset_index(), 
                          x='nom_producto', 
                          y='Total_Venta', 
                          title="Total de Ventas por Producto", 
                          labels={"nom_producto": "Producto", "Total_Venta": "Total de Ventas"},
                          color='Total_Venta')
            st.plotly_chart(fig3)

        except Exception as e:
            st.error(f"Error al cargar el archivo: {e}")

    elif option == "Modelado":
        st.subheader("Modelado: Clustering de Clientes")
        st.markdown("""
        En esta secci칩n, se realizar치 un an치lisis de clustering utilizando el algoritmo **K-Means** para segmentar los clientes seg칰n 
        sus h치bitos de compra. Utilizaremos las variables de **cantidad** y **precio_dig** para identificar grupos o clusters de clientes 
        similares, lo que nos permitir치 obtener una visi칩n m치s clara sobre el comportamiento de compra.
        """)

        try:
            # Filtro de productos m치s vendidos
            productos_filtrar = [590101, 590102, 590103, 205003, 200130, 800020, 205601, 540101, 501121, 501120]
            dfinal = df[df['codproducto'].isin(productos_filtrar)]  # Filtrar productos

            # Seleccionar variables relevantes para el clustering
            df_cluster = dfinal[['cantidad', 'precio_dig']]

            # Estandarizar los datos
            scaler = StandardScaler()
            df_cluster_scaled = scaler.fit_transform(df_cluster)

            # Encontrar el n칰mero 칩ptimo de clusters con el m칠todo del codo
            wcss = []
            for i in range(1, 11):
                kmeans = KMeans(n_clusters=i, random_state=42, n_init=10)
                kmeans.fit(df_cluster_scaled)
                wcss.append(kmeans.inertia_)

            # Gr치fico m칠todo del codo usando Plotly
            fig_codo = go.Figure()
            fig_codo.add_trace(go.Scatter(
                x=list(range(1, 11)), 
                y=wcss, 
                mode='lines+markers', 
                name='WCSS'
            ))
            fig_codo.update_layout(
                title='M칠todo del Codo',
                xaxis_title='N칰mero de Clusters',
                yaxis_title='WCSS',
                template='plotly_dark'
            )
            st.plotly_chart(fig_codo)

            # K = 3 o K = 4 para la segmentaci칩n
            st.markdown("**Resultado del Clustering con K = 3**:")
            kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
            dfinal['Cluster'] = kmeans.fit_predict(df_cluster_scaled)

            # Visualizaci칩n de los clusters con la paleta de colores Viridis
            fig_clusters = px.scatter(dfinal, x='cantidad', y='precio_dig', color='Cluster', title="Segmentaci칩n de Clientes por Clustering (K=3)",
                                      labels={"cantidad": "Cantidad", "precio_dig": "Precio", "Cluster": "Cluster"},
                                      color_continuous_scale='viridis')
            st.plotly_chart(fig_clusters)

        except Exception as e:
            st.error(f"Error al cargar el archivo: {e}")




